# type 0 = don't do anything special
# type 1 = redirect to Unix domain socket, no PROXY protocol v2 header
# type 2 = redirect to Unix domain socket, with PROXY protocol v2 header of the original destination IP/port
# type 3 = IP translation. The network bits are replaced with the network bits of the new IP address, and the host bits remain unchanged. Can be used for IPv4->IPv6, IPv6->IPv4.
# "Compile" this file using the gen-config.py script.
# python3 gen-config.py config-example.txt config_out
# LD_PRELOAD=/path/to/liburelay-tproxy.so URELAY_TPROXY_FILE=/path/to/config_out

# entries are evaluated sequentially
# For types 1 and 2, #//n_ where n is from 0 to 7 inclusive, is substituted by the n'th 16-bit group of the IPv6 address (leftmost is 0), in %05hu format. #//P_ is the TCP port, also in %05hu format.
# For example, [2001:db8:1000:0:666:ffff:abcd:1234]:8080:
# #//0_ = 08193
# #//1_ = 03512
# #//2_ = 04096
# #//3_ = 00000
# #//4_ = 01638
# #//5_ = 65535
# #//6_ = 43981
# #//7_ = 04660
# #//P_ = 08080
# All IP ranges in this file must be IPv6. IPv4 connections will be processed as if they were IPv4-mapped IPv6 addresses in the ::ffff:0:0/96 range.

# assign otherwise unusable IPv6 range to Universal Relay
fe8f:0:1::/48 '/run/u-relay/64-#//3_.sock' 2
# larger range for Universal Relay
fe8f:0:100::/40 '/run/u-relay/48-#//4_.sock' 2
# for testing IPv6 Things
2602:806:a003:40e::/64 '/run/u-relay/ipv6_things.sock' 2
# matches socketbox-preload SKBOX_ENABLE_CONNECT behavior
fe8f::3:0:0/96 '/run/socketbox2/#//6_/#//7__#//P_' 1
# ignore localhost for NAT64
::ffff:127.0.0.0/104 '' 0
# NAT64 CLAT on well-known prefix
::ffff:0:0/96 64:ff9b:: 3
# Kasper Dupont's public NAT64 service https://nat64.net
# ::ffff:0:0/96 2a00:1098:2b::1:0:0 3
